---

- name: Check that k3s_state is a supported value
  ansible.builtin.assert:
    that:
      - k3s_state in k3s_valid_states
    fail_msg: "k3s_state not valid. Check README.md for details."
    success_msg: "k3s_state is valid."
  when: k3s_state is defined

- name: Include check version tasks
  ansible.builtin.include_tasks: pre_checks/check_version.yml
  when:
    - (k3s_release_version is not defined
      or not k3s_release_version
      or k3s_release_version is not regex('\\+k3s[1-9]$'))
    - not k3s_airgap

- name: Skipable block
  when:
    - not k3s_skip_validation
    - not k3s_skip_env_checks
  block:
    - name: Check that Ansible version is supported by this role v{{ ansible_version.string }}
      ansible.builtin.assert:
        that:
          - ansible_version.string is version_compare(k3s_ansible_min_version, '>=')
        fail_msg: >-
          Ansible v{{ ansible_version.string }} is not supported by this role.
          Please install >= v{{ k3s_ansible_min_version }}.
        success_msg: "Ansible v{{ ansible_version.string }} is supported."
      become: false
      delegate_to: localhost
      run_once: true

    - name: Check that Python version is supported by this role v{{ ansible_python_version }}
      ansible.builtin.assert:
        that:
          - ansible_python_version is version_compare(k3s_python_min_version, '>=')
        fail_msg: >-
          Python v{{ ansible_python_version }} is not supported by this role.
          Please install >= v{{ k3s_python_min_version }}.
        success_msg: "Python v{{ ansible_python_version }} is supported."
      become: false
      delegate_to: localhost
      run_once: true

    - name: Check that the target init system is supported by this role
      ansible.builtin.assert:
        that:
          - ansible_service_mgr in k3s_supported_init
        fail_msg: >-
          {{ ansible_service_mgr }} is not supported by this role.
          Supported init systems: {{ k3s_supported_init | join(', ') }}
        success_msg: "{{ ansible_service_mgr }} is supported"

    - name: Determing if  service manager is actually openrc
      ansible.builtin.stat:
        path: /sbin/openrc-run
      register: k3s_check_openrc_run
      when: k3s_service_handler[ansible_service_mgr] == 'service'

    - name: Check that service manager is actually openrc
      ansible.builtin.assert:
        that:
          - k3s_check_openrc_run.stat.exists
        fail_msg: >-
          openrc was not found, cannot install to {{ ansible_service_mgr }}
        success_msg: "openrc found"
      when: k3s_service_handler[ansible_service_mgr] == 'service'

    - name: Include check cgroups tasks
      ansible.builtin.include_tasks: pre_checks/check_cgroups.yml
      loop: "{{ k3s_cgroup_subsys }}"
      loop_control:
        loop_var: cgroup

    - name: Include check packages tasks
      ansible.builtin.include_tasks: pre_checks/check_packages.yml
      loop: "{{ k3s_check_packages[k3s_os_distribution_version] }}"
      loop_control:
        loop_var: package
      when: k3s_check_packages[k3s_os_distribution_version] is defined

- name: Include check issue data tasks
  ansible.builtin.include_tasks: pre_checks/check_issue_data.yml
  when:
    - pyratlabs_issue_controller_dump is defined
    - pyratlabs_issue_controller_dump

- name: Import check variables tasks
  ansible.builtin.import_tasks: pre_checks/check_variables.yml
  when: not k3s_skip_validation

- name: Import check experimental variables tasks
  ansible.builtin.import_tasks: pre_checks/check_experimental_variables.yml
  when: not k3s_skip_validation

- name: Import check unsupported rootless tasks
  ansible.builtin.import_tasks: pre_checks/check_unsupported_rootless.yml
  when:
    - k3s_runtime_config.rootless is defined
    - k3s_runtime_config.rootless
    - not k3s_skip_validation
